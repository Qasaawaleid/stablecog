// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/yekta/stablecog/go-apps/database/ent/server"
)

// ServerCreate is the builder for creating a Server entity.
type ServerCreate struct {
	config
	mutation *ServerMutation
	hooks    []Hook
}

// SetURL sets the "url" field.
func (sc *ServerCreate) SetURL(s string) *ServerCreate {
	sc.mutation.SetURL(s)
	return sc
}

// SetHealthy sets the "healthy" field.
func (sc *ServerCreate) SetHealthy(b bool) *ServerCreate {
	sc.mutation.SetHealthy(b)
	return sc
}

// SetNillableHealthy sets the "healthy" field if the given value is not nil.
func (sc *ServerCreate) SetNillableHealthy(b *bool) *ServerCreate {
	if b != nil {
		sc.SetHealthy(*b)
	}
	return sc
}

// SetEnabled sets the "enabled" field.
func (sc *ServerCreate) SetEnabled(b bool) *ServerCreate {
	sc.mutation.SetEnabled(b)
	return sc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (sc *ServerCreate) SetNillableEnabled(b *bool) *ServerCreate {
	if b != nil {
		sc.SetEnabled(*b)
	}
	return sc
}

// SetFeatures sets the "features" field.
func (sc *ServerCreate) SetFeatures(s struct {
	Name   string   "json:\"name\""
	Values []string "json:\"values,omitempty\""
}) *ServerCreate {
	sc.mutation.SetFeatures(s)
	return sc
}

// SetLastHealthCheckAt sets the "last_health_check_at" field.
func (sc *ServerCreate) SetLastHealthCheckAt(t time.Time) *ServerCreate {
	sc.mutation.SetLastHealthCheckAt(t)
	return sc
}

// SetNillableLastHealthCheckAt sets the "last_health_check_at" field if the given value is not nil.
func (sc *ServerCreate) SetNillableLastHealthCheckAt(t *time.Time) *ServerCreate {
	if t != nil {
		sc.SetLastHealthCheckAt(*t)
	}
	return sc
}

// SetCreatedAt sets the "created_at" field.
func (sc *ServerCreate) SetCreatedAt(t time.Time) *ServerCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ServerCreate) SetNillableCreatedAt(t *time.Time) *ServerCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ServerCreate) SetUpdatedAt(t time.Time) *ServerCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ServerCreate) SetNillableUpdatedAt(t *time.Time) *ServerCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetUserTier sets the "user_tier" field.
func (sc *ServerCreate) SetUserTier(st server.UserTier) *ServerCreate {
	sc.mutation.SetUserTier(st)
	return sc
}

// SetNillableUserTier sets the "user_tier" field if the given value is not nil.
func (sc *ServerCreate) SetNillableUserTier(st *server.UserTier) *ServerCreate {
	if st != nil {
		sc.SetUserTier(*st)
	}
	return sc
}

// SetID sets the "id" field.
func (sc *ServerCreate) SetID(u uuid.UUID) *ServerCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ServerCreate) SetNillableID(u *uuid.UUID) *ServerCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// Mutation returns the ServerMutation object of the builder.
func (sc *ServerCreate) Mutation() *ServerMutation {
	return sc.mutation
}

// Save creates the Server in the database.
func (sc *ServerCreate) Save(ctx context.Context) (*Server, error) {
	sc.defaults()
	return withHooks[*Server, ServerMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ServerCreate) SaveX(ctx context.Context) *Server {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ServerCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ServerCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ServerCreate) defaults() {
	if _, ok := sc.mutation.Healthy(); !ok {
		v := server.DefaultHealthy
		sc.mutation.SetHealthy(v)
	}
	if _, ok := sc.mutation.Enabled(); !ok {
		v := server.DefaultEnabled
		sc.mutation.SetEnabled(v)
	}
	if _, ok := sc.mutation.LastHealthCheckAt(); !ok {
		v := server.DefaultLastHealthCheckAt()
		sc.mutation.SetLastHealthCheckAt(v)
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := server.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := server.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.UserTier(); !ok {
		v := server.DefaultUserTier
		sc.mutation.SetUserTier(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := server.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ServerCreate) check() error {
	if _, ok := sc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "Server.url"`)}
	}
	if _, ok := sc.mutation.Healthy(); !ok {
		return &ValidationError{Name: "healthy", err: errors.New(`ent: missing required field "Server.healthy"`)}
	}
	if _, ok := sc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "Server.enabled"`)}
	}
	if _, ok := sc.mutation.Features(); !ok {
		return &ValidationError{Name: "features", err: errors.New(`ent: missing required field "Server.features"`)}
	}
	if _, ok := sc.mutation.LastHealthCheckAt(); !ok {
		return &ValidationError{Name: "last_health_check_at", err: errors.New(`ent: missing required field "Server.last_health_check_at"`)}
	}
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Server.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Server.updated_at"`)}
	}
	if _, ok := sc.mutation.UserTier(); !ok {
		return &ValidationError{Name: "user_tier", err: errors.New(`ent: missing required field "Server.user_tier"`)}
	}
	if v, ok := sc.mutation.UserTier(); ok {
		if err := server.UserTierValidator(v); err != nil {
			return &ValidationError{Name: "user_tier", err: fmt.Errorf(`ent: validator failed for field "Server.user_tier": %w`, err)}
		}
	}
	return nil
}

func (sc *ServerCreate) sqlSave(ctx context.Context) (*Server, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ServerCreate) createSpec() (*Server, *sqlgraph.CreateSpec) {
	var (
		_node = &Server{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: server.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: server.FieldID,
			},
		}
	)
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.URL(); ok {
		_spec.SetField(server.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := sc.mutation.Healthy(); ok {
		_spec.SetField(server.FieldHealthy, field.TypeBool, value)
		_node.Healthy = value
	}
	if value, ok := sc.mutation.Enabled(); ok {
		_spec.SetField(server.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := sc.mutation.Features(); ok {
		_spec.SetField(server.FieldFeatures, field.TypeJSON, value)
		_node.Features = value
	}
	if value, ok := sc.mutation.LastHealthCheckAt(); ok {
		_spec.SetField(server.FieldLastHealthCheckAt, field.TypeTime, value)
		_node.LastHealthCheckAt = value
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(server.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(server.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.UserTier(); ok {
		_spec.SetField(server.FieldUserTier, field.TypeEnum, value)
		_node.UserTier = value
	}
	return _node, _spec
}

// ServerCreateBulk is the builder for creating many Server entities in bulk.
type ServerCreateBulk struct {
	config
	builders []*ServerCreate
}

// Save creates the Server entities in the database.
func (scb *ServerCreateBulk) Save(ctx context.Context) ([]*Server, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Server, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ServerCreateBulk) SaveX(ctx context.Context) []*Server {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ServerCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ServerCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
