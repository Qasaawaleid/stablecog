// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yekta/stablecog/go-apps/database/ent/predicate"
	"github.com/yekta/stablecog/go-apps/database/ent/upscalerealtime"
)

// UpscaleRealtimeQuery is the builder for querying UpscaleRealtime entities.
type UpscaleRealtimeQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	inters     []Interceptor
	predicates []predicate.UpscaleRealtime
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UpscaleRealtimeQuery builder.
func (urq *UpscaleRealtimeQuery) Where(ps ...predicate.UpscaleRealtime) *UpscaleRealtimeQuery {
	urq.predicates = append(urq.predicates, ps...)
	return urq
}

// Limit the number of records to be returned by this query.
func (urq *UpscaleRealtimeQuery) Limit(limit int) *UpscaleRealtimeQuery {
	urq.limit = &limit
	return urq
}

// Offset to start from.
func (urq *UpscaleRealtimeQuery) Offset(offset int) *UpscaleRealtimeQuery {
	urq.offset = &offset
	return urq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (urq *UpscaleRealtimeQuery) Unique(unique bool) *UpscaleRealtimeQuery {
	urq.unique = &unique
	return urq
}

// Order specifies how the records should be ordered.
func (urq *UpscaleRealtimeQuery) Order(o ...OrderFunc) *UpscaleRealtimeQuery {
	urq.order = append(urq.order, o...)
	return urq
}

// First returns the first UpscaleRealtime entity from the query.
// Returns a *NotFoundError when no UpscaleRealtime was found.
func (urq *UpscaleRealtimeQuery) First(ctx context.Context) (*UpscaleRealtime, error) {
	nodes, err := urq.Limit(1).All(newQueryContext(ctx, TypeUpscaleRealtime, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{upscalerealtime.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (urq *UpscaleRealtimeQuery) FirstX(ctx context.Context) *UpscaleRealtime {
	node, err := urq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first UpscaleRealtime ID from the query.
// Returns a *NotFoundError when no UpscaleRealtime ID was found.
func (urq *UpscaleRealtimeQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = urq.Limit(1).IDs(newQueryContext(ctx, TypeUpscaleRealtime, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{upscalerealtime.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (urq *UpscaleRealtimeQuery) FirstIDX(ctx context.Context) int {
	id, err := urq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single UpscaleRealtime entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one UpscaleRealtime entity is found.
// Returns a *NotFoundError when no UpscaleRealtime entities are found.
func (urq *UpscaleRealtimeQuery) Only(ctx context.Context) (*UpscaleRealtime, error) {
	nodes, err := urq.Limit(2).All(newQueryContext(ctx, TypeUpscaleRealtime, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{upscalerealtime.Label}
	default:
		return nil, &NotSingularError{upscalerealtime.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (urq *UpscaleRealtimeQuery) OnlyX(ctx context.Context) *UpscaleRealtime {
	node, err := urq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only UpscaleRealtime ID in the query.
// Returns a *NotSingularError when more than one UpscaleRealtime ID is found.
// Returns a *NotFoundError when no entities are found.
func (urq *UpscaleRealtimeQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = urq.Limit(2).IDs(newQueryContext(ctx, TypeUpscaleRealtime, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{upscalerealtime.Label}
	default:
		err = &NotSingularError{upscalerealtime.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (urq *UpscaleRealtimeQuery) OnlyIDX(ctx context.Context) int {
	id, err := urq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of UpscaleRealtimes.
func (urq *UpscaleRealtimeQuery) All(ctx context.Context) ([]*UpscaleRealtime, error) {
	ctx = newQueryContext(ctx, TypeUpscaleRealtime, "All")
	if err := urq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*UpscaleRealtime, *UpscaleRealtimeQuery]()
	return withInterceptors[[]*UpscaleRealtime](ctx, urq, qr, urq.inters)
}

// AllX is like All, but panics if an error occurs.
func (urq *UpscaleRealtimeQuery) AllX(ctx context.Context) []*UpscaleRealtime {
	nodes, err := urq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of UpscaleRealtime IDs.
func (urq *UpscaleRealtimeQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = newQueryContext(ctx, TypeUpscaleRealtime, "IDs")
	if err := urq.Select(upscalerealtime.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (urq *UpscaleRealtimeQuery) IDsX(ctx context.Context) []int {
	ids, err := urq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (urq *UpscaleRealtimeQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeUpscaleRealtime, "Count")
	if err := urq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, urq, querierCount[*UpscaleRealtimeQuery](), urq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (urq *UpscaleRealtimeQuery) CountX(ctx context.Context) int {
	count, err := urq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (urq *UpscaleRealtimeQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeUpscaleRealtime, "Exist")
	switch _, err := urq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (urq *UpscaleRealtimeQuery) ExistX(ctx context.Context) bool {
	exist, err := urq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UpscaleRealtimeQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (urq *UpscaleRealtimeQuery) Clone() *UpscaleRealtimeQuery {
	if urq == nil {
		return nil
	}
	return &UpscaleRealtimeQuery{
		config:     urq.config,
		limit:      urq.limit,
		offset:     urq.offset,
		order:      append([]OrderFunc{}, urq.order...),
		inters:     append([]Interceptor{}, urq.inters...),
		predicates: append([]predicate.UpscaleRealtime{}, urq.predicates...),
		// clone intermediate query.
		sql:    urq.sql.Clone(),
		path:   urq.path,
		unique: urq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (urq *UpscaleRealtimeQuery) GroupBy(field string, fields ...string) *UpscaleRealtimeGroupBy {
	urq.fields = append([]string{field}, fields...)
	grbuild := &UpscaleRealtimeGroupBy{build: urq}
	grbuild.flds = &urq.fields
	grbuild.label = upscalerealtime.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (urq *UpscaleRealtimeQuery) Select(fields ...string) *UpscaleRealtimeSelect {
	urq.fields = append(urq.fields, fields...)
	sbuild := &UpscaleRealtimeSelect{UpscaleRealtimeQuery: urq}
	sbuild.label = upscalerealtime.Label
	sbuild.flds, sbuild.scan = &urq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UpscaleRealtimeSelect configured with the given aggregations.
func (urq *UpscaleRealtimeQuery) Aggregate(fns ...AggregateFunc) *UpscaleRealtimeSelect {
	return urq.Select().Aggregate(fns...)
}

func (urq *UpscaleRealtimeQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range urq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, urq); err != nil {
				return err
			}
		}
	}
	for _, f := range urq.fields {
		if !upscalerealtime.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if urq.path != nil {
		prev, err := urq.path(ctx)
		if err != nil {
			return err
		}
		urq.sql = prev
	}
	return nil
}

func (urq *UpscaleRealtimeQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*UpscaleRealtime, error) {
	var (
		nodes = []*UpscaleRealtime{}
		_spec = urq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*UpscaleRealtime).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &UpscaleRealtime{config: urq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, urq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (urq *UpscaleRealtimeQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := urq.querySpec()
	_spec.Node.Columns = urq.fields
	if len(urq.fields) > 0 {
		_spec.Unique = urq.unique != nil && *urq.unique
	}
	return sqlgraph.CountNodes(ctx, urq.driver, _spec)
}

func (urq *UpscaleRealtimeQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   upscalerealtime.Table,
			Columns: upscalerealtime.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: upscalerealtime.FieldID,
			},
		},
		From:   urq.sql,
		Unique: true,
	}
	if unique := urq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := urq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upscalerealtime.FieldID)
		for i := range fields {
			if fields[i] != upscalerealtime.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := urq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := urq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := urq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := urq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (urq *UpscaleRealtimeQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(urq.driver.Dialect())
	t1 := builder.Table(upscalerealtime.Table)
	columns := urq.fields
	if len(columns) == 0 {
		columns = upscalerealtime.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if urq.sql != nil {
		selector = urq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if urq.unique != nil && *urq.unique {
		selector.Distinct()
	}
	for _, p := range urq.predicates {
		p(selector)
	}
	for _, p := range urq.order {
		p(selector)
	}
	if offset := urq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := urq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UpscaleRealtimeGroupBy is the group-by builder for UpscaleRealtime entities.
type UpscaleRealtimeGroupBy struct {
	selector
	build *UpscaleRealtimeQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (urgb *UpscaleRealtimeGroupBy) Aggregate(fns ...AggregateFunc) *UpscaleRealtimeGroupBy {
	urgb.fns = append(urgb.fns, fns...)
	return urgb
}

// Scan applies the selector query and scans the result into the given value.
func (urgb *UpscaleRealtimeGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeUpscaleRealtime, "GroupBy")
	if err := urgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpscaleRealtimeQuery, *UpscaleRealtimeGroupBy](ctx, urgb.build, urgb, urgb.build.inters, v)
}

func (urgb *UpscaleRealtimeGroupBy) sqlScan(ctx context.Context, root *UpscaleRealtimeQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(urgb.fns))
	for _, fn := range urgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*urgb.flds)+len(urgb.fns))
		for _, f := range *urgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*urgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := urgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UpscaleRealtimeSelect is the builder for selecting fields of UpscaleRealtime entities.
type UpscaleRealtimeSelect struct {
	*UpscaleRealtimeQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (urs *UpscaleRealtimeSelect) Aggregate(fns ...AggregateFunc) *UpscaleRealtimeSelect {
	urs.fns = append(urs.fns, fns...)
	return urs
}

// Scan applies the selector query and scans the result into the given value.
func (urs *UpscaleRealtimeSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeUpscaleRealtime, "Select")
	if err := urs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpscaleRealtimeQuery, *UpscaleRealtimeSelect](ctx, urs.UpscaleRealtimeQuery, urs, urs.inters, v)
}

func (urs *UpscaleRealtimeSelect) sqlScan(ctx context.Context, root *UpscaleRealtimeQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(urs.fns))
	for _, fn := range urs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*urs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := urs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
