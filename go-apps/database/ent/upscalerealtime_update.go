// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yekta/stablecog/go-apps/database/ent/predicate"
	"github.com/yekta/stablecog/go-apps/database/ent/upscalerealtime"
)

// UpscaleRealtimeUpdate is the builder for updating UpscaleRealtime entities.
type UpscaleRealtimeUpdate struct {
	config
	hooks    []Hook
	mutation *UpscaleRealtimeMutation
}

// Where appends a list predicates to the UpscaleRealtimeUpdate builder.
func (uru *UpscaleRealtimeUpdate) Where(ps ...predicate.UpscaleRealtime) *UpscaleRealtimeUpdate {
	uru.mutation.Where(ps...)
	return uru
}

// Mutation returns the UpscaleRealtimeMutation object of the builder.
func (uru *UpscaleRealtimeUpdate) Mutation() *UpscaleRealtimeMutation {
	return uru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uru *UpscaleRealtimeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, UpscaleRealtimeMutation](ctx, uru.sqlSave, uru.mutation, uru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uru *UpscaleRealtimeUpdate) SaveX(ctx context.Context) int {
	affected, err := uru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uru *UpscaleRealtimeUpdate) Exec(ctx context.Context) error {
	_, err := uru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uru *UpscaleRealtimeUpdate) ExecX(ctx context.Context) {
	if err := uru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uru *UpscaleRealtimeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   upscalerealtime.Table,
			Columns: upscalerealtime.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: upscalerealtime.FieldID,
			},
		},
	}
	if ps := uru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upscalerealtime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uru.mutation.done = true
	return n, nil
}

// UpscaleRealtimeUpdateOne is the builder for updating a single UpscaleRealtime entity.
type UpscaleRealtimeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UpscaleRealtimeMutation
}

// Mutation returns the UpscaleRealtimeMutation object of the builder.
func (uruo *UpscaleRealtimeUpdateOne) Mutation() *UpscaleRealtimeMutation {
	return uruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uruo *UpscaleRealtimeUpdateOne) Select(field string, fields ...string) *UpscaleRealtimeUpdateOne {
	uruo.fields = append([]string{field}, fields...)
	return uruo
}

// Save executes the query and returns the updated UpscaleRealtime entity.
func (uruo *UpscaleRealtimeUpdateOne) Save(ctx context.Context) (*UpscaleRealtime, error) {
	return withHooks[*UpscaleRealtime, UpscaleRealtimeMutation](ctx, uruo.sqlSave, uruo.mutation, uruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uruo *UpscaleRealtimeUpdateOne) SaveX(ctx context.Context) *UpscaleRealtime {
	node, err := uruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uruo *UpscaleRealtimeUpdateOne) Exec(ctx context.Context) error {
	_, err := uruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uruo *UpscaleRealtimeUpdateOne) ExecX(ctx context.Context) {
	if err := uruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uruo *UpscaleRealtimeUpdateOne) sqlSave(ctx context.Context) (_node *UpscaleRealtime, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   upscalerealtime.Table,
			Columns: upscalerealtime.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: upscalerealtime.FieldID,
			},
		},
	}
	id, ok := uruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UpscaleRealtime.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upscalerealtime.FieldID)
		for _, f := range fields {
			if !upscalerealtime.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != upscalerealtime.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &UpscaleRealtime{config: uruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{upscalerealtime.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uruo.mutation.done = true
	return _node, nil
}
