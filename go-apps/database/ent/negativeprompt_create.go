// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/yekta/stablecog/go-apps/database/ent/generation"
	"github.com/yekta/stablecog/go-apps/database/ent/generationg"
	"github.com/yekta/stablecog/go-apps/database/ent/negativeprompt"
)

// NegativePromptCreate is the builder for creating a NegativePrompt entity.
type NegativePromptCreate struct {
	config
	mutation *NegativePromptMutation
	hooks    []Hook
}

// SetText sets the "text" field.
func (npc *NegativePromptCreate) SetText(s string) *NegativePromptCreate {
	npc.mutation.SetText(s)
	return npc
}

// SetCreatedAt sets the "created_at" field.
func (npc *NegativePromptCreate) SetCreatedAt(t time.Time) *NegativePromptCreate {
	npc.mutation.SetCreatedAt(t)
	return npc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (npc *NegativePromptCreate) SetNillableCreatedAt(t *time.Time) *NegativePromptCreate {
	if t != nil {
		npc.SetCreatedAt(*t)
	}
	return npc
}

// SetUpdatedAt sets the "updated_at" field.
func (npc *NegativePromptCreate) SetUpdatedAt(t time.Time) *NegativePromptCreate {
	npc.mutation.SetUpdatedAt(t)
	return npc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (npc *NegativePromptCreate) SetNillableUpdatedAt(t *time.Time) *NegativePromptCreate {
	if t != nil {
		npc.SetUpdatedAt(*t)
	}
	return npc
}

// SetID sets the "id" field.
func (npc *NegativePromptCreate) SetID(u uuid.UUID) *NegativePromptCreate {
	npc.mutation.SetID(u)
	return npc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (npc *NegativePromptCreate) SetNillableID(u *uuid.UUID) *NegativePromptCreate {
	if u != nil {
		npc.SetID(*u)
	}
	return npc
}

// AddGenerationIDs adds the "generation" edge to the Generation entity by IDs.
func (npc *NegativePromptCreate) AddGenerationIDs(ids ...uuid.UUID) *NegativePromptCreate {
	npc.mutation.AddGenerationIDs(ids...)
	return npc
}

// AddGeneration adds the "generation" edges to the Generation entity.
func (npc *NegativePromptCreate) AddGeneration(g ...*Generation) *NegativePromptCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return npc.AddGenerationIDs(ids...)
}

// AddGenerationGIDs adds the "generation_g" edge to the GenerationG entity by IDs.
func (npc *NegativePromptCreate) AddGenerationGIDs(ids ...uuid.UUID) *NegativePromptCreate {
	npc.mutation.AddGenerationGIDs(ids...)
	return npc
}

// AddGenerationG adds the "generation_g" edges to the GenerationG entity.
func (npc *NegativePromptCreate) AddGenerationG(g ...*GenerationG) *NegativePromptCreate {
	ids := make([]uuid.UUID, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return npc.AddGenerationGIDs(ids...)
}

// Mutation returns the NegativePromptMutation object of the builder.
func (npc *NegativePromptCreate) Mutation() *NegativePromptMutation {
	return npc.mutation
}

// Save creates the NegativePrompt in the database.
func (npc *NegativePromptCreate) Save(ctx context.Context) (*NegativePrompt, error) {
	npc.defaults()
	return withHooks[*NegativePrompt, NegativePromptMutation](ctx, npc.sqlSave, npc.mutation, npc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (npc *NegativePromptCreate) SaveX(ctx context.Context) *NegativePrompt {
	v, err := npc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (npc *NegativePromptCreate) Exec(ctx context.Context) error {
	_, err := npc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npc *NegativePromptCreate) ExecX(ctx context.Context) {
	if err := npc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (npc *NegativePromptCreate) defaults() {
	if _, ok := npc.mutation.CreatedAt(); !ok {
		v := negativeprompt.DefaultCreatedAt()
		npc.mutation.SetCreatedAt(v)
	}
	if _, ok := npc.mutation.UpdatedAt(); !ok {
		v := negativeprompt.DefaultUpdatedAt()
		npc.mutation.SetUpdatedAt(v)
	}
	if _, ok := npc.mutation.ID(); !ok {
		v := negativeprompt.DefaultID()
		npc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (npc *NegativePromptCreate) check() error {
	if _, ok := npc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "NegativePrompt.text"`)}
	}
	if _, ok := npc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "NegativePrompt.created_at"`)}
	}
	if _, ok := npc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "NegativePrompt.updated_at"`)}
	}
	return nil
}

func (npc *NegativePromptCreate) sqlSave(ctx context.Context) (*NegativePrompt, error) {
	if err := npc.check(); err != nil {
		return nil, err
	}
	_node, _spec := npc.createSpec()
	if err := sqlgraph.CreateNode(ctx, npc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	npc.mutation.id = &_node.ID
	npc.mutation.done = true
	return _node, nil
}

func (npc *NegativePromptCreate) createSpec() (*NegativePrompt, *sqlgraph.CreateSpec) {
	var (
		_node = &NegativePrompt{config: npc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: negativeprompt.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: negativeprompt.FieldID,
			},
		}
	)
	if id, ok := npc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := npc.mutation.Text(); ok {
		_spec.SetField(negativeprompt.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := npc.mutation.CreatedAt(); ok {
		_spec.SetField(negativeprompt.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := npc.mutation.UpdatedAt(); ok {
		_spec.SetField(negativeprompt.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := npc.mutation.GenerationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   negativeprompt.GenerationTable,
			Columns: []string{negativeprompt.GenerationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := npc.mutation.GenerationGIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   negativeprompt.GenerationGTable,
			Columns: []string{negativeprompt.GenerationGColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: generationg.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NegativePromptCreateBulk is the builder for creating many NegativePrompt entities in bulk.
type NegativePromptCreateBulk struct {
	config
	builders []*NegativePromptCreate
}

// Save creates the NegativePrompt entities in the database.
func (npcb *NegativePromptCreateBulk) Save(ctx context.Context) ([]*NegativePrompt, error) {
	specs := make([]*sqlgraph.CreateSpec, len(npcb.builders))
	nodes := make([]*NegativePrompt, len(npcb.builders))
	mutators := make([]Mutator, len(npcb.builders))
	for i := range npcb.builders {
		func(i int, root context.Context) {
			builder := npcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NegativePromptMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, npcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, npcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, npcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (npcb *NegativePromptCreateBulk) SaveX(ctx context.Context) []*NegativePrompt {
	v, err := npcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (npcb *NegativePromptCreateBulk) Exec(ctx context.Context) error {
	_, err := npcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (npcb *NegativePromptCreateBulk) ExecX(ctx context.Context) {
	if err := npcb.Exec(ctx); err != nil {
		panic(err)
	}
}
