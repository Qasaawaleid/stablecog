// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yekta/stablecog/go-apps/database/ent/predicate"
	"github.com/yekta/stablecog/go-apps/database/ent/upscale"
)

// UpscaleQuery is the builder for querying Upscale entities.
type UpscaleQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	inters     []Interceptor
	predicates []predicate.Upscale
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UpscaleQuery builder.
func (uq *UpscaleQuery) Where(ps ...predicate.Upscale) *UpscaleQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UpscaleQuery) Limit(limit int) *UpscaleQuery {
	uq.limit = &limit
	return uq
}

// Offset to start from.
func (uq *UpscaleQuery) Offset(offset int) *UpscaleQuery {
	uq.offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UpscaleQuery) Unique(unique bool) *UpscaleQuery {
	uq.unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UpscaleQuery) Order(o ...OrderFunc) *UpscaleQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// First returns the first Upscale entity from the query.
// Returns a *NotFoundError when no Upscale was found.
func (uq *UpscaleQuery) First(ctx context.Context) (*Upscale, error) {
	nodes, err := uq.Limit(1).All(newQueryContext(ctx, TypeUpscale, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{upscale.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UpscaleQuery) FirstX(ctx context.Context) *Upscale {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Upscale ID from the query.
// Returns a *NotFoundError when no Upscale ID was found.
func (uq *UpscaleQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(1).IDs(newQueryContext(ctx, TypeUpscale, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{upscale.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UpscaleQuery) FirstIDX(ctx context.Context) int {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Upscale entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Upscale entity is found.
// Returns a *NotFoundError when no Upscale entities are found.
func (uq *UpscaleQuery) Only(ctx context.Context) (*Upscale, error) {
	nodes, err := uq.Limit(2).All(newQueryContext(ctx, TypeUpscale, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{upscale.Label}
	default:
		return nil, &NotSingularError{upscale.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UpscaleQuery) OnlyX(ctx context.Context) *Upscale {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Upscale ID in the query.
// Returns a *NotSingularError when more than one Upscale ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UpscaleQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = uq.Limit(2).IDs(newQueryContext(ctx, TypeUpscale, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{upscale.Label}
	default:
		err = &NotSingularError{upscale.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UpscaleQuery) OnlyIDX(ctx context.Context) int {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Upscales.
func (uq *UpscaleQuery) All(ctx context.Context) ([]*Upscale, error) {
	ctx = newQueryContext(ctx, TypeUpscale, "All")
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Upscale, *UpscaleQuery]()
	return withInterceptors[[]*Upscale](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UpscaleQuery) AllX(ctx context.Context) []*Upscale {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Upscale IDs.
func (uq *UpscaleQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	ctx = newQueryContext(ctx, TypeUpscale, "IDs")
	if err := uq.Select(upscale.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UpscaleQuery) IDsX(ctx context.Context) []int {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UpscaleQuery) Count(ctx context.Context) (int, error) {
	ctx = newQueryContext(ctx, TypeUpscale, "Count")
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UpscaleQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UpscaleQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UpscaleQuery) Exist(ctx context.Context) (bool, error) {
	ctx = newQueryContext(ctx, TypeUpscale, "Exist")
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UpscaleQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UpscaleQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UpscaleQuery) Clone() *UpscaleQuery {
	if uq == nil {
		return nil
	}
	return &UpscaleQuery{
		config:     uq.config,
		limit:      uq.limit,
		offset:     uq.offset,
		order:      append([]OrderFunc{}, uq.order...),
		inters:     append([]Interceptor{}, uq.inters...),
		predicates: append([]predicate.Upscale{}, uq.predicates...),
		// clone intermediate query.
		sql:    uq.sql.Clone(),
		path:   uq.path,
		unique: uq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
func (uq *UpscaleQuery) GroupBy(field string, fields ...string) *UpscaleGroupBy {
	uq.fields = append([]string{field}, fields...)
	grbuild := &UpscaleGroupBy{build: uq}
	grbuild.flds = &uq.fields
	grbuild.label = upscale.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
func (uq *UpscaleQuery) Select(fields ...string) *UpscaleSelect {
	uq.fields = append(uq.fields, fields...)
	sbuild := &UpscaleSelect{UpscaleQuery: uq}
	sbuild.label = upscale.Label
	sbuild.flds, sbuild.scan = &uq.fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UpscaleSelect configured with the given aggregations.
func (uq *UpscaleQuery) Aggregate(fns ...AggregateFunc) *UpscaleSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UpscaleQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.fields {
		if !upscale.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UpscaleQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Upscale, error) {
	var (
		nodes = []*Upscale{}
		_spec = uq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Upscale).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Upscale{config: uq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (uq *UpscaleQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	_spec.Node.Columns = uq.fields
	if len(uq.fields) > 0 {
		_spec.Unique = uq.unique != nil && *uq.unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UpscaleQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   upscale.Table,
			Columns: upscale.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: upscale.FieldID,
			},
		},
		From:   uq.sql,
		Unique: true,
	}
	if unique := uq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := uq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, upscale.FieldID)
		for i := range fields {
			if fields[i] != upscale.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UpscaleQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(upscale.Table)
	columns := uq.fields
	if len(columns) == 0 {
		columns = upscale.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.unique != nil && *uq.unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UpscaleGroupBy is the group-by builder for Upscale entities.
type UpscaleGroupBy struct {
	selector
	build *UpscaleQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UpscaleGroupBy) Aggregate(fns ...AggregateFunc) *UpscaleGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UpscaleGroupBy) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeUpscale, "GroupBy")
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpscaleQuery, *UpscaleGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UpscaleGroupBy) sqlScan(ctx context.Context, root *UpscaleQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UpscaleSelect is the builder for selecting fields of Upscale entities.
type UpscaleSelect struct {
	*UpscaleQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UpscaleSelect) Aggregate(fns ...AggregateFunc) *UpscaleSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UpscaleSelect) Scan(ctx context.Context, v any) error {
	ctx = newQueryContext(ctx, TypeUpscale, "Select")
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UpscaleQuery, *UpscaleSelect](ctx, us.UpscaleQuery, us, us.inters, v)
}

func (us *UpscaleSelect) sqlScan(ctx context.Context, root *UpscaleQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
