// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/yekta/stablecog/go-apps/database/ent/generationg"
	"github.com/yekta/stablecog/go-apps/database/ent/predicate"
)

// GenerationGUpdate is the builder for updating GenerationG entities.
type GenerationGUpdate struct {
	config
	hooks    []Hook
	mutation *GenerationGMutation
}

// Where appends a list predicates to the GenerationGUpdate builder.
func (gg *GenerationGUpdate) Where(ps ...predicate.GenerationG) *GenerationGUpdate {
	gg.mutation.Where(ps...)
	return gg
}

// Mutation returns the GenerationGMutation object of the builder.
func (gg *GenerationGUpdate) Mutation() *GenerationGMutation {
	return gg.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gg *GenerationGUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, GenerationGMutation](ctx, gg.sqlSave, gg.mutation, gg.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gg *GenerationGUpdate) SaveX(ctx context.Context) int {
	affected, err := gg.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gg *GenerationGUpdate) Exec(ctx context.Context) error {
	_, err := gg.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gg *GenerationGUpdate) ExecX(ctx context.Context) {
	if err := gg.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gg *GenerationGUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   generationg.Table,
			Columns: generationg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: generationg.FieldID,
			},
		},
	}
	if ps := gg.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gg.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generationg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gg.mutation.done = true
	return n, nil
}

// GenerationGUpdateOne is the builder for updating a single GenerationG entity.
type GenerationGUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GenerationGMutation
}

// Mutation returns the GenerationGMutation object of the builder.
func (ggo *GenerationGUpdateOne) Mutation() *GenerationGMutation {
	return ggo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ggo *GenerationGUpdateOne) Select(field string, fields ...string) *GenerationGUpdateOne {
	ggo.fields = append([]string{field}, fields...)
	return ggo
}

// Save executes the query and returns the updated GenerationG entity.
func (ggo *GenerationGUpdateOne) Save(ctx context.Context) (*GenerationG, error) {
	return withHooks[*GenerationG, GenerationGMutation](ctx, ggo.sqlSave, ggo.mutation, ggo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ggo *GenerationGUpdateOne) SaveX(ctx context.Context) *GenerationG {
	node, err := ggo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ggo *GenerationGUpdateOne) Exec(ctx context.Context) error {
	_, err := ggo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ggo *GenerationGUpdateOne) ExecX(ctx context.Context) {
	if err := ggo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ggo *GenerationGUpdateOne) sqlSave(ctx context.Context) (_node *GenerationG, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   generationg.Table,
			Columns: generationg.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: generationg.FieldID,
			},
		},
	}
	id, ok := ggo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GenerationG.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ggo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, generationg.FieldID)
		for _, f := range fields {
			if !generationg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != generationg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ggo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &GenerationG{config: ggo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ggo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{generationg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ggo.mutation.done = true
	return _node, nil
}
